import asyncio
from pathlib import Path
import aiohttp
import os
import shutil

from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.state import default_state
from aiogram_dialog import DialogManager
from aiogram.types import FSInputFile, InputMediaDocument
from aiogram.exceptions import AiogramError
from loguru import logger

from utils.formatter import format_sessions_message
from utils.payments import buy_session, check_payment_status, get_minutes_amount
from utils.consts import AMOUNTS_DCT
from database.requests import add_session_to_user, deduct_session, get_user_sessions, add_new_user
from dialogs import dialogs
from utils.tasks import cleanup_session, process_files, schedule_send_files
from utils.utils import get_files, send_files_message


router = Router()


articles_button = InlineKeyboardButton(text='–ü–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø', callback_data='articles_button_pressed')
keyboard = InlineKeyboardMarkup(inline_keyboard=[[articles_button]])

button_10 = InlineKeyboardButton(text='10 –º–∏–Ω—É—Ç', callback_data='button_10')
button_15 = InlineKeyboardButton(text='15 –º–∏–Ω—É—Ç', callback_data='button_15')
button_30 = InlineKeyboardButton(text='30 –º–∏–Ω—É—Ç', callback_data='button_30')
button_hour = InlineKeyboardButton(text='1 —á–∞—Å', callback_data='button_hour')

keyboard_payments = InlineKeyboardMarkup(inline_keyboard=[
    [button_15],
    # [button_hour]
])


@router.message(Command(commands='start'))
async def process_start_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    username = str(message.chat.username)
    tg_id = message.from_user.id
    add_new_user(username, tg_id)
    image_path = Path(__file__).parent.parent / "opensci.jpg"
    photo = FSInputFile(image_path)
    await message.answer_photo(
        photo=photo,
        caption="–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –ª–µ–≥–∫–æ –∏ –±—ã—Å—Ç—Ä–æ –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –°–∫–æ–ø—É—Å.\n\n–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π –Ω–∏–∂–µ –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ /access.\n\nüìù –ü—Ä–æ–¥–æ–ª–∂–∞—è, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ, —á—Ç–æ –æ–∑–Ω–∞–∫–æ–º–∏–ª–∏—Å—å —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π: https://telegra.ph/Kak-ispolzovat-OpenSciBot-07-09\n\nüéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í–∞–º –Ω–∞—á–∏—Å–ª–µ–Ω–æ 2 –ø—Ä–æ–±–Ω—ã–µ —Å–µ—Å—Å–∏–∏ –ø–æ 15 –º–∏–Ω—É—Ç!",
        reply_markup=keyboard
    )


@router.message(Command(commands='help'))
async def process_help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(text="""
/access   - –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–µ—Å—Å–∏–∏
/payments - –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞
/support  - —Å–≤—è–∑—å —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
/balance  - –±–∞–ª–∞–Ω—Å
"""
    )


@router.message(Command(commands='payments'))
async def process_payments_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /payments."""
    await message.answer(
        text="""üí∞ –í—ã–±–µ—Ä–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏ –¥–ª—è –ø–æ–∫—É–ø–∫–∏:

–î–æ—Å—Ç—É–ø –Ω–∞ 15 –º–∏–Ω—É—Ç -  219 —Ä—É–±
""",
        reply_markup=keyboard_payments
    )


@router.callback_query(F.data.in_(['button_10', 'button_15', 'button_30', 'button_hour']))
async def generate_payment(callback: CallbackQuery):
    """–§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–ª–∞—Ç–µ–∂–∞ –∏ –µ–≥–æ –ø—Ä–æ–≤–µ—Ä–∫–∏."""
    amount = AMOUNTS_DCT[callback.data]
    payment_url, payment_id = buy_session(amount, callback.message.chat.id)
    url = InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∞", url=payment_url)
    check = InlineKeyboardButton(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=f'check_{payment_id}')
    keyboard_buy = InlineKeyboardMarkup(inline_keyboard=[[url, check]])

    await callback.message.answer(text="üîó –í–∞—à–∞ —Å—Å—ã–ª–∫–∞ –Ω–∞ –æ–ø–ª–∞—Ç—É –≥–æ—Ç–æ–≤–∞!\n–ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞.",
                         reply_markup=keyboard_buy)


@router.callback_query(lambda x: "check" in x.data)
async def check_payment(callback: CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–ª–∞—Ç–µ–∂–∞."""
    res = check_payment_status(callback.data.split('_')[-1])
    mins = get_minutes_amount(callback.data.split('_')[-1])
    if res:
        add_session_to_user(tg_id=int(callback.from_user.id), length=int(mins), count=1)
        await callback.message.answer(f"‚úÖ –û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –Ω–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω –¥–æ—Å—Ç—É–ø –Ω–∞ {mins} –º–∏–Ω—É—Ç.")
    else:
        await callback.message.answer("‚åõÔ∏è –û–ø–ª–∞—Ç–∞ –µ—â–µ –Ω–µ –ø—Ä–æ—à–ª–∞.")


@router.message(Command(commands='support'))
async def process_support_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /support."""
    await message.answer(text="üí¨ –ü–æ–¥–¥–µ—Ä–∂–∫–∞: @chadbugsy\nüìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: https://telegra.ph/Kak-ispolzovat-OpenSciBot-07-09")


@router.message(Command(commands='balance'))
async def process_balance_command(message: Message):
    tg_id = message.from_user.id
    sessions = get_user_sessions(tg_id)
    if sessions:
        await message.answer(format_sessions_message(sessions))
    else:
        await message.answer(f"–£ –≤–∞—Å –Ω–µ—Ç –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –¥–æ—Å—Ç—É–ø–æ–≤.\nüí≥ –ß—Ç–æ–±—ã –ø–æ–ø–æ–ª–Ω–∏—Ç—å –±–∞–ª–∞–Ω—Å, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /payments.")


@router.callback_query(F.data == "articles_button_pressed", StateFilter(default_state))
async def process_articles_button(callback: CallbackQuery, state: FSMContext):
    username = str(callback.message.chat.username)
    tg_id = callback.from_user.id
    add_new_user(username, tg_id)
    
    user_sessions = get_user_sessions(tg_id)
    
    if user_sessions:
        await state.update_data(user_sessions=user_sessions)

        keyboard = dialogs.create_session_keyboard(user_sessions)

        await callback.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:", reply_markup=keyboard)

        await state.set_state(dialogs.SessionStates.selecting_session)
    else:
        await callback.message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ—Å—Å–∏–∏.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Åüëáüèº")
        await process_payments_command(callback.message)
    
    await callback.answer()


@router.message(Command(commands='access'))
async def process_access_command(message: Message, state: FSMContext):
    username = str(message.chat.username)
    tg_id = message.from_user.id
    add_new_user(username, tg_id)
    
    user_sessions = get_user_sessions(tg_id)
    
    if user_sessions:
        await state.update_data(user_sessions=user_sessions)

        keyboard = dialogs.create_session_keyboard(user_sessions)

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:", reply_markup=keyboard)

        await state.set_state(dialogs.SessionStates.selecting_session)
    else:
        await message.answer("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ—Å—Å–∏–∏.\n–ü—Ä–∏–æ–±—Ä–µ—Ç–∏—Ç–µ –∏—Ö —Å–µ–π—á–∞—Åüëáüèº")
        await process_payments_command(message)
        return


@router.callback_query(dialogs.SessionCallbackFactory.filter(F.action == "select"), dialogs.SessionStates.selecting_session)
async def process_session_selection(callback: CallbackQuery, callback_data: dialogs.SessionCallbackFactory, state: FSMContext):
    session_length = callback_data.length

    await state.update_data(selected_length=session_length)

    keyboard = dialogs.create_confirmation_keyboard(session_length)

    session_names = {10: '10 –º–∏–Ω—É—Ç', 15: '15 –º–∏–Ω—É—Ç', 30: '30 –º–∏–Ω—É—Ç', 60: '1 —á–∞—Å'}
    session_name = session_names.get(session_length, f"{session_length} –º–∏–Ω—É—Ç")

    await callback.message.edit_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–µ—Å—Å–∏—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {session_name}. –í—ã —É–≤–µ—Ä–µ–Ω—ã?", 
        reply_markup=keyboard
    )

    await state.set_state(dialogs.SessionStates.confirming_session)

    await callback.answer()


@router.callback_query(dialogs.SessionCallbackFactory.filter(F.action == "confirm"), dialogs.SessionStates.confirming_session)
async def process_session_confirmation(callback: CallbackQuery, callback_data: dialogs.SessionCallbackFactory, state: FSMContext):
    data = await state.get_data()
    session_length = data.get("selected_length")
    user_id = callback.from_user.id

    session_names = {10: '10 –º–∏–Ω—É—Ç', 15: '15 –º–∏–Ω—É—Ç', 30: '30 –º–∏–Ω—É—Ç', 60: '1 —á–∞—Å'}
    session_name = session_names.get(session_length, f"{session_length} –º–∏–Ω—É—Ç")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"https://opensci.ru/create/{user_id}",
                timeout=aiohttp.ClientTimeout(total=30)
            ) as response:
                response.raise_for_status() 
                
                result = await response.json()

                keyboard = InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(
                        text="üì• –ü–æ–ª—É—á–∏—Ç—å —Ñ–∞–π–ª—ã", 
                        callback_data=dialogs.SessionCallbackFactory(action="download", length=0).pack()
                    )]
                ])

                if result.get('status') == 'created':
                    deduct_session(tg_id=user_id, length=session_length)
                    cleanup_session.apply_async(args=[str(user_id)], countdown=session_length * 60)
                    asyncio.create_task(schedule_send_files(session_length, str(user_id), callback))

                    message = (f"‚úÖ –°–µ—Å—Å–∏—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é {session_name} —É—Å–ø–µ—à–Ω–æ –Ω–∞—á–∞—Ç–∞!\n\n"
                               f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {result['access_url']}")
                elif result.get('status') == 'exists':
                    message = (f"‚ùóÔ∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è!\n\n"
                               f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞: {result['access_url']}")
                else:
                    message = "ü§î –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–µ—Å—Å–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                await asyncio.sleep(2)
                await callback.message.edit_text(
                    text=message,
                    reply_markup=keyboard
                )

    except aiohttp.ClientResponseError as e:
        if e.status == 429:
            try:
                error_details = await e.json()
                error_message = error_details.get('detail', "–°–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç.")
            except Exception:
                error_message = "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ 15 –º–∏–Ω—É—Ç."
            
            await callback.message.edit_text(f"‚ö†Ô∏è {error_message}")
        else:
            await callback.message.edit_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ —Å–µ—Å—Å–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.warning(f"HTTP Response Error for user {user_id}: {e.status} - {e.message}")

    except aiohttp.ClientError as e:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —Å–µ—Å—Å–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        logger.error(f"Client connection error for user {user_id}: {str(e)}")

    except AiogramError as e:
        await callback.message.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        logger.error(f"Telegram API error for user {user_id}: {str(e)}")
    except Exception as e:
        await callback.message.edit_text(f"‚ö†Ô∏è –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–∏—Ç–µ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        logger.critical(f"Unexpected error in session confirmation for user {user_id}: {str(e)}", exc_info=True)

    finally:
        await state.clear()
        await callback.answer()


@router.callback_query(dialogs.SessionCallbackFactory.filter(F.action == "download"))
async def process_files_download(callback: CallbackQuery, callback_data: dialogs.SessionCallbackFactory, state: FSMContext):
    temp_dir = None
    temp_zip_path = None
    try:
        user_id = callback.from_user.id
        await callback.answer("–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤...")
        files = await get_files(user_id)
        await send_files_message(files, callback)

    except Exception as e:
        await callback.message.answer(f"‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
    finally:
        if temp_dir:
            shutil.rmtree(temp_dir, ignore_errors=True)
        if temp_zip_path:
            os.remove(temp_zip_path)
        await callback.answer()


@router.callback_query(dialogs.SessionCallbackFactory.filter(F.action == "back"), dialogs.SessionStates.confirming_session)
async def process_session_back(callback: CallbackQuery, callback_data: dialogs.SessionCallbackFactory, state: FSMContext):
    data = await state.get_data()
    user_sessions = data.get("user_sessions")

    if not user_sessions:
        tg_id = callback.from_user.id
        user_sessions = get_user_sessions(tg_id)
    
    if user_sessions:
        keyboard = dialogs.create_session_keyboard(user_sessions)
        await callback.message.edit_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —Å–µ—Å—Å–∏–∏:", reply_markup=keyboard)
        await state.update_data(user_sessions=user_sessions)
        await state.set_state(dialogs.SessionStates.selecting_session)
    else:
        await callback.message.edit_text("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å —Å–µ—Å—Å–∏–∏.")
        await process_payments_command(callback.message)

    await callback.answer()
